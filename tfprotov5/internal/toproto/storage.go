package toproto

import (
	"github.com/hashicorp/terraform-plugin-go/tfprotov5"
	"github.com/hashicorp/terraform-plugin-go/tfprotov5/internal/tfplugin5"
)

func ValidateStorageConfig_Request(in *tfprotov5.ValidateStorageConfigRequest) (*tfplugin5.ValidateStorageConfig_Request, error) {
	resp := &tfplugin5.ValidateStorageConfig_Request{
		StorageName: in.StorageName,
	}
	if in.Config != nil {
		resp.Config = DynamicValue(in.Config)
	}
	return resp, nil
}

func ValidateStorageConfig_Response(in *tfprotov5.ValidateStorageConfigResponse) (*tfplugin5.ValidateStorageConfig_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	resp := &tfplugin5.ValidateStorageConfig_Response{
		Diagnostics: diags,
	}

	return resp, nil
}

func ConfigureStorage_Request(in *tfprotov5.ConfigureStorageRequest) (*tfplugin5.ConfigureStorage_Request, error) {
	resp := &tfplugin5.ConfigureStorage_Request{
		StorageName: in.StorageName,
	}
	if in.Config != nil {
		resp.Config = DynamicValue(in.Config)
	}
	return resp, nil
}

func ConfigureStorage_Response(in *tfprotov5.ConfigureStorageResponse) (*tfplugin5.ConfigureStorage_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.ConfigureStorage_Response{
		Diagnostics: diags,
	}, nil
}

func WriteState_Request(in *tfprotov5.WriteStateRequest) (*tfplugin5.WriteState_Request, error) {
	resp := &tfplugin5.WriteState_Request{
		StateName: in.StateName,
		State:     in.State,
	}
	return resp, nil
}

func WriteState_Response(in *tfprotov5.WriteStateResponse) (*tfplugin5.WriteState_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.WriteState_Response{
		Diagnostics: diags,
	}, nil
}

func ReadState_Request(in *tfprotov5.ReadStateRequest) (*tfplugin5.ReadState_Request, error) {
	resp := &tfplugin5.ReadState_Request{
		StateName: in.StateName,
	}
	return resp, nil
}

func ReadState_Response(in *tfprotov5.ReadStateResponse) (*tfplugin5.ReadState_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.ReadState_Response{
		State:       in.State,
		Diagnostics: diags,
	}, nil
}

func LockState_Request(in *tfprotov5.LockStateRequest) (*tfplugin5.LockState_Request, error) {
	resp := &tfplugin5.LockState_Request{
		StateName: in.StateName,
	}
	return resp, nil
}

func LockState_Response(in *tfprotov5.LockStateResponse) (*tfplugin5.LockState_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.LockState_Response{
		Diagnostics: diags,
	}, nil
}

func UnlockState_Request(in *tfprotov5.UnlockStateRequest) (*tfplugin5.UnlockState_Request, error) {
	resp := &tfplugin5.UnlockState_Request{
		StateName: in.StateName,
		Force:     in.Force,
	}
	return resp, nil
}

func UnlockState_Response(in *tfprotov5.UnlockStateResponse) (*tfplugin5.UnlockState_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.UnlockState_Response{
		Diagnostics: diags,
	}, nil
}

func GetStates_Request(in *tfprotov5.GetStatesRequest) (*tfplugin5.GetStates_Request, error) {
	resp := &tfplugin5.GetStates_Request{}
	return resp, nil
}

func GetStates_Response(in *tfprotov5.GetStatesResponse) (*tfplugin5.GetStates_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.GetStates_Response{
		Diagnostics: diags,
	}, nil
}

func DeleteState_Request(in *tfprotov5.DeleteStateRequest) (*tfplugin5.DeleteState_Request, error) {
	resp := &tfplugin5.DeleteState_Request{
		StateName: in.StateName,
	}
	return resp, nil
}

func DeleteState_Response(in *tfprotov5.DeleteStateResponse) (*tfplugin5.DeleteState_Response, error) {
	diags, err := Diagnostics(in.Diagnostics)
	if err != nil {
		return nil, err
	}
	return &tfplugin5.DeleteState_Response{
		Diagnostics: diags,
	}, nil
}

// we have to say this next thing to get golint to stop yelling at us about the
// underscores in the function names. We want the function names to match
// actually-generated code, so it feels like fair play. It's just a shame we
// lose golint for the entire file.
//
// This file is not actually generated. You can edit it. Ignore this next line.
// Code generated by hand ignore this next bit DO NOT EDIT.
